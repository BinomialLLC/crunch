#summary Statistics
#labels Featured

== DXT1 vs. CRN at Various Bitrates ==

Here's a [http://www.tenacioussoftware.com/crn_stats/dec29/crn_stats_dec_29.htm chart] comparing the RGB [http://en.wikipedia.org/wiki/RMSE RMSE] (root mean square error) of RYG's real-time DXT1 compressor, crnlib's regular DXT1 compressor using uniform or perceptual metrics (which is very similar to ATI_Compress or squish), verses .CRN at .75-2.0bpp at .25bpp increments. This spreadsheet also has two columns showing how many bits/pixel are needed by LZMA to compress DXT1 uniform and perceptual .DDS files.

Here's the [http://www.tenacioussoftware.com/crn_stats/dec29/crn_stats_dec_29.xlsx raw Excel spreadsheet file]. This was generated by running crunch_x64.exe a bunch of times with the -csvfile command line option and manually merging the columns.

Note that each .CRN column was generated by specifying the -bitrate option, which really only limits the *maximum* bitrate a file is allowed to use. .CRN is a variable block size format, and the front end limits the maximum endpoint/selector palette sizes to 8192 entries each. So on a few of the simpler images here very high bitrates (like 1.75 or 2.0bpp) may not actually be achievable. (You can see this effect clearly on serrano.)

These RMSE values should be comparable to the values in Charles Bloom's very useful [http://cbloomrants.blogspot.com/2008/11/11-20-08-dxtc-part-3.html blog post] comparing various DXT1 compressors. (My RYG RMSE stats are slightly different from Bloom's, and I don't know exactly why, but I'm guessing our versions of RYG's compressor are slightly different.)

[http://www.tenacioussoftware.com/crn_stats/dec29/rmse_chart.png RMSE chart] of the above spreadsheet, sorted by DXT1 uniform RMSE.

----

== JPEG followed by Real-Time DXT1 vs. CRN ==

In this test, I compressed the test corpus with libjpeg at various bitrates using a binary search to find the JPEG quality factor level closest to each test bitrate. The test bitrates where .75-2.0 bpp at .25 bpp increments.

These .JPG files where then unpacked to 24-bit RGB (using the decompressor in [http://nothings.org/stb_image.c stb_image.c]), then compressed to DXT1 using [http://www.farb-rausch.de/~fg/code/ RYG's real-time DXT1 compressor]. The resulting DXT1 bits where then unpacked using crnlib to back to 24-bit RGB and compared to the original images to generate this RMSE data:

[http://www.tenacioussoftware.com/crn_stats/dec29/crn_vs_jpg_stats_dec29.htm Charts at various bitrates]

[http://www.tenacioussoftware.com/crn_stats/dec29/crn_vs_jpg_stats_dec29.xlsx Raw Excel spreadsheet]

This test shows that, in an RMSE sense, CRN is roughly comparable to JPG+RYG_DXT1 at 1.0-1.25bpp. At less than 1.0bpp, CRN is worse, and beginning at ~1.25bpp CRN is generally superior than JPEG followed by real-time DXT1 compression.

These results are similar to [http://www.jacobstrom.com/publications/StromWennerstenHPG2011.pdf Stromm and Wennersten's published results of testing JPEG followed by ETC1]:

 "If JPEG is used as the transport format, the textures will need to be compressed on-the-ﬂy to a texture compression format such as ETC1 after download. To ﬁnd out how much this transcoding will lower the quality, we compressed the JPEG images to ETC1 and measured the average mean square error. The result was an increased error equivalent to a PSNR drop of 2.02 dB than if just ETC1 encoding were used. Thus even if the JPEGs have equal quality to the proposed scheme, after the transcoding there will be a signiﬁcant quality penalty. The transcoding used slow exhaustive compression—fast transcoding will give an even higher penalty"

Also, this observation from the introduction is relevant to this comparison:

 "[...] This is often a good solution, especially if low bit rates are of interest, but the resulting texture quality suffers for two reasons: First, the ﬁnal texture will include image artifacts both from JPEG and from the texture codec. Second, to make recompression from JPEG to the texture codec quick enough, shortcuts may be necessary, especially on mobile devices with limited computational power. This lowers quality,  specially when compared to slow, perhaps exhaustive compression."

----

== Comparison Images ==

Ordered by highest to lowest quality. It's pretty clear that .CRN's subjective quality starts dropping fast around ~1.0 bpp. (Better coding at the .CRN backend would make a big difference at these bitrates.)

*crnlib DXT1* (uniform colorspace metrics), RMSE: 8.29, .DDS+LZMA: 2.95 bpp
http://www.tenacioussoftware.com/crn_stats/kodim14_pics/kodim14_dds_uniform.png

*RYG DXT1*, RMSE: 8.97
http://www.tenacioussoftware.com/crn_stats/kodim14_pics/kodim14_dds_ryg.png

*CRN DXT1 2.0 bpp*, RMSE: 10.36
http://www.tenacioussoftware.com/crn_stats/kodim14_pics/kodim14_crn_2_00.png

*CRN DXT1 1.75 bpp*, RMSE: 11.23
http://www.tenacioussoftware.com/crn_stats/kodim14_pics/kodim14_crn_1_75.png

*CRN DXT1 1.5 bpp*, RMSE: 12.44
http://www.tenacioussoftware.com/crn_stats/kodim14_pics/kodim14_crn_1_50.png

*CRN DXT1 1.25 bpp*, RMSE: 14.2
http://www.tenacioussoftware.com/crn_stats/kodim14_pics/kodim14_crn_1_25.png

*CRN DXT1 1.0 bpp*, RMSE: 16.75
http://www.tenacioussoftware.com/crn_stats/kodim14_pics/kodim14_crn_1_00.png

*CRN DXT1 .75bpp*, RMSE: 20.69
http://www.tenacioussoftware.com/crn_stats/kodim14_pics/kodim14_crn_0_75.png

*CRN DXT1 .65bpp*, RMSE: 22.93
http://www.tenacioussoftware.com/crn_stats/kodim14_pics/kodim14_crn_0_65.png